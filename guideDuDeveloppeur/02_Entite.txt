# Règles de développement des entités - conception

## Visibilité des attributs sensibles
Est concidéré comme *sensible* tout attribut dont la valeur ne doit pas être visible de l'extérieur du système. Par exemple : le mot de passe d'un utilisateur.
Pour protéger ces attributs, l'annotation *@com.fasterxml.jackson.annotation.JsonIgnore* doit être ajoutée au dessus de l'attribut.

L'usage de cette annotation est interdit dans les DTO car ils ne doivent contenir que des données publiables à l'extérieur.

## Visibilité des identifiants
Les identifiants techniques sont des donnés sensibles car ils permettent au client d'une API d'obtenir des informations sur la structure interne du système. Dans certains système, l'exposition de l'API étant maitrisée/limité, cela ne pose pas de soucis.

Mais "qui peut le plus peut le moins". Donc l'application n'expose pas ses identifiants mais expose des références. Ces références sont générées à partir des identifiants et permettent de les recalculer rapidement tout en vérifiant leur intégrité (vérification vis à vis du type d'objet).

Mise en place dans le code : 

* Les méthodes *Entite.genererReference* et *Entite.extraireIdentifiant* permettent de manipuler une référence.
* Toutes les classes héritant de Entite masquent leur identifiant et expose la méthode *getReference*
* Toutes les classes n'héritant pas de Entite implémentent l'interface IdentifiableParReference et génèrent/interpretent leur référence.

# Règles de développement des entités - Hibernate

## Lazy loading
Toutes les associations doivent êtes *lazy*. Les *xxToMany* le sont par défaut donc il est inutile de le coder. 

Mais les *xxToOne* sont *eager* par défaut. Il faut donc ajouter *fetch=LAZY*

## Accesseurs

### Identifiant mono-colonne
Ne jamais implémenter le setter de l'identifiant unique. Au mieux, prévoir un constructeur comprenant l'identifiant. Ceci pour éviter les tentatives malheureuses de modification manuelle de l'identifiant d'une entité déjà persistée.

### Identifiant multi-colonne
Dans les classes définissant un identifiant unique (marquée *@Embeddable* et utilisée avec un *@Id* dans un *@Entity*), aucun setter ne doit exister. Seul le constructeur doit permettre d'initialiser les valeurs.

### Mutabilité
Tous les accesseurs doivent gérer la mutabilité des membres. Autrement dit, si le membre est de type *Date* ou *Collection*, il doit être cloné dans les deux accesseurs en utilisant *MutableUtils.getMutable*. La gestion des objets mutables n'empêche pas le chargement à la volée. 

Pour permettre d'ajouter ou de retirer un élément à une collection qui n'est pas en lecture seule (*mappedBy="xxx"* ou *updatable=false*), il faut ajouter des méthodes *addXxx* et *removeXxx*.

## @ManyToMany
Tous les @ManyToMany doivent être en lecture seule (*insertable=false* et *updatable=false*).
Il est plus simple de créer une entité mappée sur la table de jointure pour modifier les liens de cette associations.
Attention, pour la classe d'association, il est nécessaire de préciser le nom de la table avec *@javax.persistence.Table*. Sinon Hibernate pense que c'est une erreur et lance une exception *org.hibernate.tool.schema.spi.SchemaManagementException: SQL strings added more than once for: nom_table_en_double*.
Pour les détails d'un mapping *@ManyToMany* en lecture seule, se référer aux supports de la formation Hibernate.

## Repository

### Requête
Le principal outil pour faire des requêtes est *HQL*. L'usage de l'API *Criteria* est réservé aux cas les plus complexes (car cette API est plus complexe à utiliser et donc à maintenir).

### ReadOnly
L'usage de requêtes retournant des entités en lecture seule est à privilégier au maximum.
Dans un repository Spring-Data, il suffit d'ajouter à une méthode : 
``` @QueryHints(value = { @QueryHint(name = org.hibernate.jpa.QueryHints.HINT_READONLY, value = "true") }) ```


Dans une méthode utilisant l'API JPA, il faut utiliser la méthode *setHint* de *Query* :
``` em.createQuery(hql).setHint(org.hibernate.jpa.QueryHints.HINT_READONLY, true)```

Dans une méthode utilisant l'API Hibernate, il faut utiliser la méthode *setReadonly* de *Query* :
``` session.createQuery(hql).setReadonly(true)```
