# Règles de développement Java

Tous les accesseurs doivent gérer la mutabilité des membres. Autrement dit, si le membre est de type Date ou Collection, il doit être cloné dans les deux accesseurs.

# Règles de développement Hibernate

Toutes les associations doivent êtes LAZY (les xxToMany le sont par défaut mais pas les xxToOne).

Ne jamais implémenter le setter de l'identifiant unique. Au mieux, prévoir un constructeur comprenant l'identifiant. Ceci pour éviter les tentatives malheureuses de modification manuelle de l'identifiant d'une entité déjà persistée.

## @ManyToMany
Tous les @ManyToMany doivent être en lecture seule (insertable=false et updatable=false). 
Il est plus simple de créer une entité mappée sur la table de jointure pour modifier les liens de cette associations.
Attention, pour la classe d'association, il est nécessaire de préciser le nom de la table avec *@javax.persistence.Table*. Sinon Hibernate pense que c'est une erreur et lance une exception *org.hibernate.tool.schema.spi.SchemaManagementException: SQL strings added more than once for: nom_table_en_double*.
Pour les détails d'un mapping ManyToMany en lecture seule, se référer aux supports de la formation Hibernate.

# Règles de développement des tests

## JUnit
Tout test de l'application *métier* doit être basé sur JUnit et utiliser l'intégration avec Spring (annotations @RunWith et @SpringBootTest).
De plus, il doit utiliser le scope *test* (avec l'annotaiton @Scope) pour bien utiliser le fichier application-test.properties.

## Nommage
Une classe de test ne contient que des tests d'un même composant.
Mais il est possible de créer plusieurs classes de test pour un même composant si le nombre de cas de tests est important. Il faut alors séparer les cas de test de manière logique.

Afin de simplifier le nommage et la recherche d'un cas de test, la nomenclature est : testXxGroupeYyCasParticulier avec 

* *test* le préfix de toute méthode de test (héritage de JUnit-3 qui reste une bonne pratique)
* *Xx* un nombre permettant de trier les groupes de test (très pratique quand il est associé à la fonction *Sort Members* d'Eclipse)
* *Groupe* l'objet du test : une entité, un groupe de méthode, une méthode particulière
* *Yy* un nombre permettant de trier les cas de test dans le groupe (très pratique quand il est associé à la fonction *Sort Members* d'Eclipse)
* *CasParticulier* la description du cas de test
